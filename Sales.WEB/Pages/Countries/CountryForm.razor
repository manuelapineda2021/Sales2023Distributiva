@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>

<EditForm EditContext="editConext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>País:</label>

        <div>
            <InputText class="form-control" @bind-Value="@Country.Name"/>
            <ValidationMessage For="@(() => Country.Name)"/>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>

</EditForm>

@code {
    private EditContext editConext = null!;

    [Parameter]
    [EditorRequired]
    public Country Country { get; set; } = null!;

    //submit button
    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    //back button
    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editConext = new(Country);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editConext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
        });

        //the user confirmed
        var confirm = !string.IsNullOrEmpty(result.Value);
        //The user confirmed without saving changes
        if (confirm)
        {
            return;
        }

        //Inpide user navigation
        context.PreventNavigation();
    }
}
